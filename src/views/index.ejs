<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Node Chat</title>
  <link rel="icon" href="/images/node-chat-icon.png">
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body>

  <div class="flex flex-row h-screen">

    <aside id="asideBar" class="bg-slate-700 w-full md:w-96 h-full flex flex-row text-white">
      
      <div class="w-full">
        <div class="flex justify-between m-4">
          <img src="/images/node-chat-logo.png" alt="logo" class="w-24">
          <div onclick="logoutUser()" class="text-2xl cursor-pointer" title="Log Out">⬅️</div>
        </div>

        <!-- contact list -->
        <div class="w-full" id="contactListContainer">
          <!-- <div class="p-3 border-slate-500 border-t border-1 flex flex-row w-full cursor-pointer hover:bg-slate-600 duration-200">
            <div class="rounded-full bg-red-400 h-12 min-w-12 flex justify-center items-center">
              <span class="text-2xl font-semibold">F</span>
            </div>
            <div class="w-full ml-3 ">
              <div class="flex justify-between">
                <div>Fandi</div>
                <div class="text-sm">10:13</div>
              </div>
              <div class="text-sm opacity-75">di mana posisi?</div>
            </div>
          </div> -->
        </div>
      </div>
    </aside>
  
    <main id="mainContainer" class="bg-slate-500 w-full h-screen flex-col hidden md:block">

      <!-- empty chat thumbnail -->
      <div id="emptyChatThumbnail" class="h-screen flex justify-center items-center">
        <div>
          <img src="/images/node-chat-logo.png" alt="logo" class="w-52 mx-auto mb-6">
          <p class="text-xl text-white">Select a contact to start chatting</p>
        </div>
      </div>

      <div class="w-full bg-slate-800 p-4 block md:hidden">
        <div onclick="backToContactList()" class="text-2xl cursor-pointer">⬅️</div>
      </div>

      <!-- chat container -->
      <div id="chatContainer" class="w-full hidden overflow-auto bg-slate-500 px-8 pt-4 text-white h" style="height: 90%;"></div>
      <!-- <div id="chatContainer" class="w-full hidden overflow-auto bg-slate-500 px-8 pt-4 text-white"></div> -->
      
      <!-- text input -->
      <form id="textInputContainer" class="bg-slate-800 hidden h-fit flex flex-row pt-3 pb-2 md:pb-2.5 px-8">
        <input type="text" required id="textInput" placeholder="Type a message" class="w-full p-2 rounded-md">
        <button onclick="sendMessage()" id="sendMessage" class="hover:bg-black hover:bg-opacity-20 duration-150 rounded-md px-3 py-0 ml-2 text-white text-2xl">
          ➤
        </button>
      </form>

    </main>

  </div>


<script src="socket.io/socket.io.js"></script>
<script>
  const chatContainer = document.getElementById('chatContainer')
  const textInput = document.getElementById('textInput')

  const emptyChatThumbnail = document.getElementById('emptyChatThumbnail')
  const textInputContainer = document.getElementById('textInputContainer')

  const socket = io()
  socket.on('connect', () => console.log('socket terkoneksi'))

  const getCurrentTime = () => {
    const now = new Date();
    const hours = now.getHours().toString().padStart(2, '0');
    const minutes = now.getMinutes().toString().padStart(2, '0');
    return `${hours}:${minutes}`;
  }

  const createBubbleChat  = (chat, isSender) => {
    const divContainer = document.createElement('div');
    divContainer.innerHTML = /*html*/`
      <div class="w-full flex ${isSender ? 'justify-end pl-60' : 'justify-start pr-60'}">
        <div class="${isSender ? 'bg-green-700' : 'bg-slate-700'} p-2 mb-3 rounded-md w-fit flex flex-col">
          <span>${chat}</span>
          <span class="text-xs opacity-75 ${isSender ? 'text-left' : 'text-right'}">${getCurrentTime()}</span>
        </div>
      </div>
    `;
    return divContainer
  }

  const sendMessage = () => {
    const bubbleChat = createBubbleChat(textInput.value, true)
    chatContainer.appendChild(bubbleChat)
    socket.emit('send_message', textInput.value)
    chatContainer.scrollTop = chatContainer.scrollHeight;
    sendChatMessage()
    textInput.value = ''
  }

  socket.on('new_message', pesan => {
    const bubbleChat = createBubbleChat(pesan, false)
    bubbleChat.classList.add('pesan-new')
    chatContainer.appendChild(bubbleChat)
    chatContainer.scrollTop = chatContainer.scrollHeight;
  })

  // ======== LOGOUT USER =========
  const logoutUser = () => {
    fetch('/api/auth/logout', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
    })
    .then(response => response.json())
    .then(data => {
      console.log('Success:', data);
      if (data.status === 200) {
        window.location.href = "/login";
      }
    })
    .catch((error) => {
      console.error('Error:', error);
    });
  }

  // ======== GET ALL USERS =========
  const contactListContainer = document.getElementById('contactListContainer')
  let currentUserId = null

  const getAllUser = async () => {
    try {
      const response = await fetch('/api/user', {
        method: 'get',
        headers: {
          'Content-Type': 'application/json'
        },
      });

      if (!response.ok) {
        throw new Error('Network response was not ok');
      }

      const data = await response.json();
      currentUserId = data.current_user.id

      // Bersihkan kontainer sebelum menambah elemen baru
      contactListContainer.innerHTML = '';

      // Loop melalui data dan buat elemen untuk setiap email
      data.data.forEach(user => {
        const email = user.email;
        const firstNameInitial = email.charAt(0).toUpperCase();

        const emailDiv = /*html*/`
          <div onclick="getIdUser(${user.id})" class="p-3 border-slate-500 border-t border-1 flex flex-row items-center w-full cursor-pointer hover:bg-slate-600 duration-200">
            <div class="rounded-full bg-red-400 h-12 min-w-12 flex justify-center items-center">
              <span class="text-2xl font-semibold">${firstNameInitial}</span>
            </div>
            <div class="w-full ml-3">
              <div>${email}</div> 
            </div>
          </div>
        `;

        contactListContainer.insertAdjacentHTML('beforeend', emailDiv);
      });
    } catch (error) {
      console.error('Error:', error);
    }
  }

  let idUserForChat = null
  const asideBar = document.getElementById('asideBar')
  const mainContainer = document.getElementById('mainContainer')

  window.addEventListener('resize', () => {
    if (window.innerWidth > 768) {
      chatContainer.style.height = '90%'
    } else {
      chatContainer.style.height = '80%'
    }
  })

  const getIdUser = (id) => {
    idUserForChat = id
    emptyChatThumbnail.classList.add('hidden')
    chatContainer.classList.remove('hidden')
    textInputContainer.classList.remove('hidden')
    if (window.innerWidth < 768) {
      asideBar.classList.add('hidden')
      mainContainer.classList.remove('hidden')
    }
    
    getChatByUser()
  }

  const backToContactList = () => {
    asideBar.classList.remove('hidden')
    mainContainer.classList.add('hidden')
  }

  // ======== GET CHAT BY USER ========
  const getChatByUser = async () => {
    try {
      const dataSend = {
        id_user_from: currentUserId,
        id_user_to: idUserForChat
      }
      const response = await fetch('/api/chat/chat-by-user', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(dataSend)
      });

      if (!response.ok) {
        throw new Error('Network response was not ok');
      }

      const data = await response.json();

      // Bersihkan kontainer sebelum menambah elemen baru
      chatContainer.innerHTML = '';

      const convertTime = (time) => {
        const date = new Date(time);
        date.setTime(date.getTime() + 8 * 60 * 60 * 1000);
        const hours = date.getUTCHours().toString().padStart(2, '0');
        const minutes = date.getUTCMinutes().toString().padStart(2, '0');
        const formattedTime = `${hours}:${minutes}`;
        return formattedTime
      }

      // Loop melalui data dan buat elemen untuk setiap email
      data.data.forEach(chat => {
        const chatDiv = /*html*/`
          <div class="w-full flex ${chat.id_user_from === currentUserId ? 'justify-end pl-10 md:pl-60' : 'justify-start pr-10 md:pr-60'}">
            <div class="${chat.id_user_from === currentUserId ? 'bg-green-700' : 'bg-slate-700'} p-2 mb-3 rounded-md w-fit flex flex-col">
              <span>${chat.message}</span>
              <span class="text-xs opacity-75 ${chat.id_user_from === currentUserId ? 'text-left' : 'text-right'}">${convertTime(chat.created_at)}</span>
            </div>
          </div>
        `;
        chatContainer.insertAdjacentHTML('beforeend', chatDiv);
      });
      chatContainer.scrollTop = chatContainer.scrollHeight;
    } catch (error) {
      console.error('Error:', error);
    }
  }


  // ======== SEND CHAT MESSAGE ========
  const sendChatMessage = async () => {
    try {
      const dataSend = {
        id_user_from: currentUserId,
        id_user_to: idUserForChat,
        message: textInput.value,
      }
      console.log({dataSend});
      const response = await fetch('/api/chat/send', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(dataSend)
      });

      const data = await response.json();
      console.log(data, '<-- data send chat message');

    } catch (error) {
      console.error('Error:', error);
    }
  }

  window.addEventListener('load', () => {
    if (window.innerWidth > 768) {
      chatContainer.style.height = '90%'
    } else {
      chatContainer.style.height = '80%'
    }
    getAllUser()
  })
</script>
</body>
</html>